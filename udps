#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <unistd.h>

#define PORT 5000
#define MAXLINE 1000

int main() {
    int sockfd;
    char buffer[MAXLINE];
    const char *message = "Hello Client";
    struct sockaddr_in servaddr, cliaddr;

    // Create a UDP Socket
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
        perror("socket creation failed");
        exit(EXIT_FAILURE);
    }

    memset(&servaddr, 0, sizeof(servaddr));
    memset(&cliaddr, 0, sizeof(cliaddr));

    // Filling server information
    servaddr.sin_family = AF_INET;
    servaddr.sin_addr.s_addr = INADDR_ANY;
    servaddr.sin_port = htons(PORT);

    // Bind the socket with the server address
    if (bind(sockfd, (const struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {
        perror("bind failed");
        exit(EXIT_FAILURE);
    }

    printf("Server listening on port %d...\n", PORT);

    socklen_t len = sizeof(cliaddr);
    int n;

    // Receive the client datagram
    n = recvfrom(sockfd, (char *)buffer, MAXLINE, MSG_WAITALL, 
                 (struct sockaddr *)&cliaddr, &len);
    if (n < 0) {
        perror("recvfrom failed");
        exit(EXIT_FAILURE);
    }
    buffer[n] = '\0';
    printf("Client : %s\n", buffer);

    // Send response to the client
    if (sendto(sockfd, message, strlen(message), 0, 
               (const struct sockaddr *)&cliaddr, len) < 0) {
        perror("sendto failed");
        exit(EXIT_FAILURE);
    }
    printf("Hello message sent to client.\n");

    close(sockfd);
    return 0;
}
